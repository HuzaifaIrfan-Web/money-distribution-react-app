{"version":3,"sources":["components/Persons/Persons.js","components/Results/Results.js","containers/StateManager/StateManager.js","containers/App.js","serviceWorker.js","index.js"],"names":["Persons","props","PersonsListView","PersonsList","map","aPerson","index","key","name","money","onClick","deletePersonHandler","className","class","align","Results","TotalMoney","TotalPerson","PersonsDifference","mustspent","difference","give","push","ResultsListView","StateManager","state","userNameInput","moneyInput","inputChangeHandler","event","setState","target","value","moneyinputChangeHandler","moneychange","parseInt","isNaN","addUserHandler","temp","splice","id","htmlFor","type","this","onChange","Component","App","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e29b1024.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Persons = (props) => {\n\n\n\n\n    const PersonsListView = props.PersonsList.map( (aPerson,index) =>{\n        return(\n            <tr key={index}>\n                    \n                    <td>\n                    {aPerson.name}\n                    </td>\n                    \n                        <td>\n                    {aPerson.money}\n                    </td>\n\n\n                <td>\n                    <button onClick={() => props.deletePersonHandler(index)} className=\"btn btn-danger\" >Delete</button>\n                    </td>\n                    \n   \n\n      </tr>\n  \n        )\n      })\n  \n\n\n\n\n    return(\n\n<div className=\"Persons\">\n\n\n        <table class=\"table table-hover\">\n        <thead>\n          <tr>\n            <th>\n                <h3 align=\"center\">\n                    Name\n                </h3>\n            </th>\n            <th>\n                <h3 align=\"center\">\n                    Money Spent\n                </h3>\n            </th>\n            <th>\n                <h3 align=\"center\">\n                    Delete\n                </h3>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n\n        {PersonsListView}\n\n\n\n      </tbody>\n  </table>\n\n        \n\n\n\n        </div>\n\n    )\n\n\n}\n\n\nexport default Persons;","import React from 'react';\n\n\nconst Results = (props) => {\n\n    let aPerson;\n\n    let TotalMoney=0;\n\n    let TotalPerson=0;\n\n    \n\n\n    for(aPerson of props.PersonsList){\n        // console.log(aPerson)\n        TotalMoney = TotalMoney + aPerson.money\n        TotalPerson = TotalPerson + 1\n    }\n\n    let PersonsDifference=[]\n\n    let mustspent=TotalMoney/TotalPerson\n\n    for(aPerson of props.PersonsList){\n        let difference=mustspent-aPerson.money\n\n        if (difference < 0){\n            difference= -(difference) \n            aPerson.difference=difference\n            aPerson.give=true\n\n        }else{\n\n            aPerson.difference=difference\n            aPerson.give=false\n\n        }\n\n        PersonsDifference.push(aPerson)\n    }\n\n\n\n\n    const ResultsListView = PersonsDifference.map( (aPerson,index) =>{\n        return(\n            <tr key={index}>\n                \n                    <td>{aPerson.name}\n                    {aPerson.give ?\n                        <span> Must Get </span>\n                    :\n                        <span> Must Give </span>\n                    }\n                {aPerson.difference}\n                </td>\n               \n            </tr>\n        )\n      })\n  \n\n\n\n    // const style={\n    //     display:'inline-block',\n    //     padding:'16px',\n    //     margin:'16px',\n    //     border:'1px solid black',\n    //     textAlign:'center'\n    // }\n\n\n    return(\n\n        <div className=\"Results\">\n            \n            <div className=\"jumbotron\">\n\n            <h2>Results Section</h2>\n    <h4>Total Money Spent is {TotalMoney}</h4>\n    <h4>Number of Persons are {TotalPerson}</h4>\n    <h4>Each Person Must Spend {mustspent}</h4>\n    </div>\n\n\n    <table class=\"table table-hover\">\n    <thead>\n      <tr>\n        <th>\n            <h3 align=\"center\">\n                Distribution Table\n            </h3>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n\n                {ResultsListView}\n                \n    </tbody>\n  </table>\n            \n        </div>\n\n    )\n\n\n}\n\n\nexport default Results;","import React, {Component} from 'react';\n// import logo from './logo.svg';\n// import './Persons.css';\n\n\n// import Validation from \"./Validation/Validation\"\nimport Persons from \"../../components/Persons/Persons\"\n\nimport Results from \"../../components/Results/Results\"\n\n\nclass StateManager extends Component{\n\n  state={\n    userNameInput : \"\",\n    moneyInput : 0,\n\n    PersonsList:[]\n  }\n\n\n  inputChangeHandler = (event) =>{\n    this.setState({userNameInput: event.target.value })\n  }\n\n  moneyinputChangeHandler = (event) =>{\n    var moneychange=parseInt(event.target.value)\n\n    if (isNaN(moneychange)){\n      moneychange=0\n    }\n\n    this.setState({moneyInput: moneychange })\n  }\n\n  addUserHandler= (event) =>{\n\n    if(this.state.userNameInput !== \"\"){\n\n    let temp= [...this.state.PersonsList]\n    temp.push({name:this.state.userNameInput , money :this.state.moneyInput})\n    \n\n\n    this.setState({PersonsList:temp})\n    this.setState({userNameInput:''})\n    this.setState({moneyInput:0})\n\n    }\n\n\n    // this.setState({userInput: event.target.value })\n  }\n\n  deletePersonHandler = (index) =>{\n    let temp= [...this.state.PersonsList]\n    temp.splice(index,1)\n\n    this.setState({PersonsList:temp})\n   \n  }\n\n\n  render(){\n\n\n    return (\n      <div className=\"StateManager row\">\n        \n\n      <div id=\"InputView\" className=\"col-lg-6\">\n\n      <div className=\"jumbotron\">\n            <h2>Input Section</h2>\n        </div>\n                  <div id=\"InputForm\">\n\n                                      <div className=\"form-group row\">\n\n                                            <div className=\"col-md-4\">\n\n                                                  <label htmlFor=\"ex1\">Person Name</label>\n\n                                                  <input id=\"ex1\" type=\"text\" className=\"form-control\" name=\"PersonName\"\n                                                      value={this.state.userNameInput}\n                                                      onChange={this.inputChangeHandler}\n                                                      />\n\n                                              </div>\n\n\n                                              <div className=\"col-md-4\">\n\n                                          <label htmlFor=\"ex2\">Money Spent</label>  \n\n                                                <input id=\"ex2\" type=\"text\" className=\"form-control\" name=\"PersonMoney\"\n                                                value={this.state.moneyInput}\n                                                onChange={this.moneyinputChangeHandler}\n                                                />\n\n                                          </div>\n\n                                        <div className=\"col-md-4\">\n                                        <label htmlFor=\"ex3\">Add Person</label>  \n                                              <button id=\"ex3\" type=\"submit\" onClick={this.addUserHandler} className=\"btn btn-primary form-control\" >Add Person</button>\n                                        </div>\n\n\n\n                                      \n                                      </div>\n\n\n                    </div>\n\n\n\n                    <div id=\"PersonsView\">\n                        {/* <h2>Persons</h2> */}\n                      \n\n                        <Persons PersonsList={this.state.PersonsList} deletePersonHandler={this.deletePersonHandler}/>\n\n                      </div>\n\n\n\n        </div>\n\n          <div id=\"ResultsView\" className=\"col-lg-6\">\n                \n                {/* <h2>Results</h2> */}\n          \n\n                <Results PersonsList={this.state.PersonsList} />\n            \n\n            </div>\n\n\n\n        \n\n      </div>\n\n\n    );\n\n  }\n\n}\n\n\nexport default StateManager;\n","import React from 'react';\n// import logo from '../logo.svg';\nimport './App.css';\n\nimport './StateManager/StateManager'\nimport StateManager from './StateManager/StateManager';\n\nfunction App() {\n  return (\n    <div className=\"container App App-header \">\n      \n      <h1 align=\"center\">Money Distribution App</h1>\n\n<div class=\"alert alert-info\">\n   To equally distribute money spent amoung the persons\n</div>\n\n\n        <StateManager />\n\n        <footer>\n        <h5>Developed By <a href=\"http://huzaifairfan.com/\">Huzaifa Irfan</a></h5>\n        </footer>\n\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}